Monad Typeclass Definition:

class Applicative m => Monad m where
  (>>=) :: m a -> (a -> m b) -> m b
  (>>) :: m a -> m b -> m b
  return :: a -> m a

initial impressions:
  1. return looks like 'pure' from Applicative. I assume it is the same
  2. (>>) seems like it could just discard its first argument. I don't see the point
  3. I'm assuming, as with Applicative, that the two monad structures in the arguments of (>>=) are combined monoidally

(*>) :: Applicative f => f a -> f b -> f b
(>>) :: Monad m => m a -> m b -> m b

note the difference between the following:
putStrLn <$> getLine
  --(<$>) :: Functor f => (a -> b) -> f a -> f b
  --the first argument to (<$>), putStrLn, is of type String -> IO ()
  --IO () thus fills the role of 'b' in the type signature of (<$>)
  --the second argument, getLine has type IO String
  --IO thus fills the role of f in the type signature of (<$>)
  --Then f b corresponds to the type IO (IO ())
join $ putStrLn $ getLine
  --join turns IO (IO ()) into just IO (), and it also does what we probably wanted

do syntax:

sequncing is defined in terms of do syntax. sequencing' is the same without do

seqencing :: IO ()
sequencing = do
  putStrLn "blah"
  putStrLn "another thing"

sequencing' :: IO ()
sequencing' =
  putStrLn "blah"
  putStrLn "another thing"

similarly with binding:

binding :: IO ()
binding = do
  name <- getLine
  putStrLn name

binding' :: IO ()
binding' =
  getLine >>= putStrLn

bindingAndSequencing :: IO ()
bindingAndSequencing = do
  putStrLn "name pls"
  name <- getLine
  putStrLn ("y hello thar: " ++ name)

bindingAndSequencing' :: IO ()
bindingAndSequencing' =
  putStrLn "name pls: " >>
  getLine >>= (\name -> putStrLn ("y hello thar: " ++ name))

!!!
It seems, after a great deal of confusion, that value named by (<-) in an expression of the form:
  name <- (m a)
  is of type a, and not of type m a.
Exactly how this operator behaves for general monads (see list) is unclear to me

List Monad
specializing the type of (>>=) for list gives

(>>=) :: [a] -> (a -> [b]) -> [b]
return :: a -> [a]

twiceWhenEven :: [Integer] -> [Integer]
twiceWhenEven xs = do
  x <- xs
  if even x
    then [x*x, x*x]
    else [x*x]

tWENoDo :: [Integer] -> [Integer]
tEWNoDo xs =
  xs >>= (if even x then [x*x, x*x] else [x*x])

withJoin :: [Integer] -> [Integer]
withJoin xs =
  join [(\x -> if even x then [x*x, x*x] else [x*x]) i | i <- xs]

the behavior of this depends on the implementation of []'s Monad instance:
xs >> ys = [y | _ <- xs, y <- ys]
xs >>= f = [y | x <- xs, y <- f x]

Maybe Monad
specialize the monad function types for Maybe:
(>>=) :: Maybe a -> (a -> Maybe b) -> Maybe b
return :: a -> Maybe a

From Control.Monad:
(>=>) :: Monad m => (a -> m b) -> (b -> m c) -> a -> m c
this is composition for functions that evalaute to a type inside monadic structure

