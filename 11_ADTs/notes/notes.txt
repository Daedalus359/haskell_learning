ex 1:
	data Bool = False | True

	'data' keyword used for decalaration of a datatype
	Bool is a 'type constant', a special case of a type constructor that takes no arguments
	there are two 'data constructors' for Bool: {True, False}
	True and False are each constants, as they take no arguments

ex 2:
	data [] a = [] | a : [a]

	'[] a' is a type constructor that takes one argument
	[] is the data constructor for an empty list
	(:) is the data constructor that forms a list from an element and another list

ex 3:
	[] :: * -> *

	this is the 'kind signature' for [], which is a type constructor that is not yet applied
	once applied (e.g. [Int]), the kind is just *, meaning it is fully applied and corresponds to a type
	kind signatures for type constructor can be queried in ghci using :k <type constructor>

ex 4:
    data HuskyType a = HuskyData

    the type constructor (HuskyType) takes one argument
    the data constructor (HuskyData) takes no arguments
    the type argument (a) is said to 'have no witness'

ex 5:
    data MyType kool = MyType kool

    note that type and data constructors are allowed to have the same name
    'kool' is just another type variable. the name is arbitrary like 'a'

ex 6:
    newtype Goats =
        Goats Int deriving (Eq, Show)

    newtype is useful for when we want a type whose values are expressable in an existing type
    Goats lets us make sure that we don't pass arbitrary integers to a function that is meant to deal with goats specifically
        (by letting us specify Goats in the type signature of such a function)

ex 6:
    class TooMany a where:
        tooMany :: a -> Bool

    newtype Goats = Goats Int Deriving Show

    instance TooMany Goats where:
        tooMany (Goats n) = n > 43

    newtype also lets us define new typeclass instaces not owned by the type t corresponds to

ex 7:
    {-# LANGUAGE GeneralizedNewtypeDeriving #-}

    this pragma allows us to derive any custom typeclass instances we define on Int when we define Goat

ex 8:
    data Bool = False | True

    a sum type

ex 9:
    data Person =
        MkPerson String Int

    a product type

ex 10:
    data Person =
        Person { name :: String
        , age :: Int}
        deriving(Eq, Show)

    a product type defined with 'named record field accessors' (name, age)
    name and age are each functions that go from Person to their corresponding element
        ex:
            >let papu = Person "Papu" 5
            >age Papu
            5

ex 11:
    type Awesome = Bool

    a type synonym. This lets us use Awesome wherever we could use Bool (in type signatures, etc.)
