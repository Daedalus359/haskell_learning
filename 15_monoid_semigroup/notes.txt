definition of the monoid typeclass

class Monoid m where
	mempty :: m
	mappend :: m -> m -> m
	mconcat :: [m] -> m
	mconcat = foldr mappene mempty

review: Foldable and foldr
class Foldable t where
	foldr :: (a -> b -> b) -> b -> t a -> b

foldr f z [] = z
foldr f z (x:xs) = f x (foldr f z xs)

note foldr's recursive call operates on the tail of the list, so the first time f is evaluated is on z and the last element of xs

Examples of moniod operations in action:

mappend [1,2,3] [4,5,6] = [1,2,3,4,5,6]
mconcat [[1..3], [4..6], [7..9]] = [1,2,3,4,5,6,7,8,9]