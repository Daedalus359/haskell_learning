
==================== FINAL INTERFACE ====================
2018-06-10 21:05:44.775248 UTC

interface main:Main 8022
  interface hash: e47932fea246241a70995ae0e9b3f135
  ABI hash: de477bf43b1f82e26b52ca996a62d3f1
  export-list hash: bdf3799bae69b7c165d7ca926866d87b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b066c75f0d1c26a347836f6cf5d33adf
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies: SemigroupExs
package dependencies: QuickCheck-2.10.1 array-0.5.2.0
                      base-4.10.1.0* containers-0.5.10.2 deepseq-1.4.3.0
                      ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 integer-gmp-1.0.1.0
                      pretty-1.1.3.3 primitive-0.6.4.0 random-1.1
                      template-haskell-2.12.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.2.0
orphans: transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.10.1:Test.QuickCheck 0615fee573d7ebd8b2239421b64342c0
import  -/  QuickCheck-2.10.1:Test.QuickCheck.Test 61c201458c43f8ac69a3c249dbc6b154
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  SemigroupExs 12106e5b29e71495b80e7aae87855bd0
  exports: 7fe23f63d6d2d737b8cdbee3cea80949
  TrivAssoc 0b1197364a98deaa149b323943a5e447
  semigroupAssoc 4378d1cca4cf96456de57535c048fdae
be973fd4ab72a2ac516dce60d20acdbe
  $s$fTestable(->)3 ::
    (SemigroupExs.Trivial -> SemigroupExs.Trivial -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: SemigroupExs.Trivial
                         -> SemigroupExs.Trivial -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable w ww1 ww2 ww3 ww4 w2 }) -}
b0133ad47a71977b9505d9d6927db595
  $s$fTestable(->)4 ::
    (SemigroupExs.Trivial -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: SemigroupExs.Trivial -> GHC.Types.Bool)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 case w1
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Main.$w$dTestable1 w ww1 ww2 ww3 ww4 w2 }) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
7db34558660785941ff78b30424b8389
  $w$dTestable ::
    (SemigroupExs.Trivial -> SemigroupExs.Trivial -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: SemigroupExs.Trivial
                         -> SemigroupExs.Trivial -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ SemigroupExs.Trivial
                   @ (SemigroupExs.Trivial -> GHC.Types.Bool)
                   SemigroupExs.$fShowTrivial
                   Main.$s$fTestable(->)4
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                SemigroupExs.Trivial>_R
                                             ->_R <GHC.Show.Show SemigroupExs.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <SemigroupExs.Trivial -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                SemigroupExs.Trivial>_R
                                             ->_R <GHC.Show.Show SemigroupExs.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <SemigroupExs.Trivial
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                SemigroupExs.Trivial>_R
                                             ->_R <GHC.Show.Show SemigroupExs.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (SemigroupExs.Trivial -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <SemigroupExs.Trivial
                                                       -> SemigroupExs.Trivial -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                SemigroupExs.Trivial>_R
                                             ->_R <GHC.Show.Show SemigroupExs.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (SemigroupExs.Trivial -> GHC.Types.Bool)>_R
                                             ->_R <SemigroupExs.Trivial
                                                   -> SemigroupExs.Trivial -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   SemigroupExs.$fArbitraryTrivial1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <SemigroupExs.Trivial>_R))
                   SemigroupExs.$fArbitraryTrivial_$cshrink
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
d3f87d2c36867a038d68b5f763c466b1
  $w$dTestable1 ::
    (SemigroupExs.Trivial -> GHC.Types.Bool)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 6, Strictness: <L,C(U)><S,U><S,U><S,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (w :: SemigroupExs.Trivial -> GHC.Types.Bool)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Prim.Word#)
                   (ww3 :: GHC.Prim.Int#)
                   (w1 :: GHC.Types.Int) ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ SemigroupExs.Trivial
                   @ GHC.Types.Bool
                   SemigroupExs.$fShowTrivial
                   Test.QuickCheck.Property.$fTestableBool_$cproperty
                     `cast`
                   (Trans
                        (Sym (Test.QuickCheck.Property.N:Testable[0] <GHC.Types.Bool>_N))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                SemigroupExs.Trivial>_R
                                             ->_R <GHC.Show.Show SemigroupExs.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <SemigroupExs.Trivial -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                SemigroupExs.Trivial>_R
                                             ->_R <GHC.Show.Show SemigroupExs.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     GHC.Types.Bool>_R
                                             ->_R <SemigroupExs.Trivial -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   SemigroupExs.$fArbitraryTrivial1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <SemigroupExs.Trivial>_R))
                   SemigroupExs.$fArbitraryTrivial_$cshrink
                   w
                   ww
                   ww1
                   ww2
                   ww3
                   w1) -}
1e413ea7bbded6c759ea022c0457880c
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
9c6eaba16acb623dfe4737ca7d698124
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Test.QuickCheck.Test.$wquickCheckWithResult
                        @ SemigroupExs.TrivAssoc
                        Main.main3
                          `cast`
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                SemigroupExs.Trivial>_R
                                             ->_R <GHC.Show.Show SemigroupExs.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (SemigroupExs.Trivial
                                                      -> SemigroupExs.Trivial -> GHC.Types.Bool)>_R
                                             ->_R <SemigroupExs.Trivial
                                                   -> SemigroupExs.Trivial
                                                   -> SemigroupExs.Trivial
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                SemigroupExs.Trivial>_R
                                             ->_R <GHC.Show.Show SemigroupExs.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (SemigroupExs.Trivial
                                                      -> SemigroupExs.Trivial -> GHC.Types.Bool)>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <SemigroupExs.Trivial
                                                            -> SemigroupExs.Trivial
                                                            -> SemigroupExs.Trivial
                                                            -> GHC.Types.Bool>_N))))))
                        (GHC.Base.Nothing @ (Test.QuickCheck.Random.QCGen, GHC.Types.Int))
                        Test.QuickCheck.Test.stdArgs2
                        Test.QuickCheck.Test.stdArgs1
                        Test.QuickCheck.Test.stdArgs2
                        GHC.Types.True
                        GHC.Base.maxInt
                        Main.main2
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
3762ec6aba18429e8be09184c958ac56
  main2 ::
    SemigroupExs.Trivial
    -> SemigroupExs.Trivial -> SemigroupExs.Trivial -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: (\ (a :: SemigroupExs.Trivial)
                   (b :: SemigroupExs.Trivial)
                   (c :: SemigroupExs.Trivial) ->
                 GHC.Types.True) -}
3b82e5f341023393efd5a2ba2cde1853
  main3 ::
    (SemigroupExs.Trivial
     -> SemigroupExs.Trivial -> SemigroupExs.Trivial -> GHC.Types.Bool)
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
  {- Arity: 3,
     Strictness: <L,C(U)><S(SSSSLL),1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ (f :: SemigroupExs.Trivial
                         -> SemigroupExs.Trivial
                         -> SemigroupExs.Trivial
                         -> GHC.Types.Bool)[OneShot]
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int)[OneShot] ->
                 case eta
                        `cast`
                      (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Test.QuickCheck.Property.$wforAllShrink
                   @ SemigroupExs.Trivial
                   @ (SemigroupExs.Trivial -> SemigroupExs.Trivial -> GHC.Types.Bool)
                   SemigroupExs.$fShowTrivial
                   Main.$s$fTestable(->)3
                     `cast`
                   (Trans
                        (Nth:3
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                SemigroupExs.Trivial>_R
                                             ->_R <GHC.Show.Show SemigroupExs.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (SemigroupExs.Trivial -> GHC.Types.Bool)>_R
                                             ->_R <SemigroupExs.Trivial
                                                   -> SemigroupExs.Trivial -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                                                (Test.QuickCheck.Property.N:Prop[0])))
                                                      (Sym (Test.QuickCheck.Property.N:Property[0])))
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                SemigroupExs.Trivial>_R
                                             ->_R <GHC.Show.Show SemigroupExs.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (SemigroupExs.Trivial -> GHC.Types.Bool)>_R
                                             ->_R Sym (Test.QuickCheck.Property.N:Testable[0]
                                                           <SemigroupExs.Trivial
                                                            -> SemigroupExs.Trivial
                                                            -> GHC.Types.Bool>_N))))))
                        (Nth:2
                             (Nth:3
                                  (Nth:3
                                       (Trans
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                SemigroupExs.Trivial>_R
                                             ->_R <GHC.Show.Show SemigroupExs.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (SemigroupExs.Trivial
                                                      -> SemigroupExs.Trivial -> GHC.Types.Bool)>_R
                                             ->_R Test.QuickCheck.Property.N:Testable[0]
                                                      <SemigroupExs.Trivial
                                                       -> SemigroupExs.Trivial
                                                       -> SemigroupExs.Trivial
                                                       -> GHC.Types.Bool>_N)
                                            (<Test.QuickCheck.Arbitrary.Arbitrary
                                                SemigroupExs.Trivial>_R
                                             ->_R <GHC.Show.Show SemigroupExs.Trivial>_R
                                             ->_R <Test.QuickCheck.Property.Testable
                                                     (SemigroupExs.Trivial
                                                      -> SemigroupExs.Trivial -> GHC.Types.Bool)>_R
                                             ->_R <SemigroupExs.Trivial
                                                   -> SemigroupExs.Trivial
                                                   -> SemigroupExs.Trivial
                                                   -> GHC.Types.Bool>_R
                                             ->_R Trans
                                                      (Test.QuickCheck.Property.N:Property[0])
                                                      (Test.QuickCheck.Gen.N:Gen[0]
                                                           (Test.QuickCheck.Property.N:Prop[0]))))))))
                   SemigroupExs.$fArbitraryTrivial1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <SemigroupExs.Trivial>_R))
                   SemigroupExs.$fArbitraryTrivial_$cshrink
                   f
                   ww1
                   ww2
                   ww3
                   ww4
                   eta1 }) -}
60805ae72c27f3439742b03e488f150a
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

